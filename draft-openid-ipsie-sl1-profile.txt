



IPSIE Working Group                                           A. Parecki
Internet-Draft                                                      Okta
Intended status: Informational                              7 March 2025
Expires: 8 September 2025


                    IPSIE SL1 OpenID Connect Profile
                 draft-openid-ipsie-sl1-profile-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://drafts.aaronpk.com/ipsie-openid-sl1/draft-openid-ipsie-
   sl1-profile.html.  Status information for this document may be found
   at https://datatracker.ietf.org/doc/draft-openid-ipsie-sl1-profile/.

   Discussion of this document takes place on the IPSIE Working Group
   mailing list (mailto:openid-specs-ipsie@lists.openid.net), which is
   archived at https://openid.net/wg/ipsie/.

   Source for this draft and an issue tracker can be found at
   https://github.com/aaronpk/ipsie-openid-sl1.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
     2.1.  Roles
   3.  Profile
     3.1.  Network Layer Requirements
       3.1.1.  Requirements for all endpoints
       3.1.2.  Requirements for endpoints not used by web browsers
       3.1.3.  Requirements for endpoints used by web browsers
     3.2.  Cryptography and Secrets
     3.3.  OpenID Connect
       3.3.1.  Requirements for OpenID Providers
       3.3.2.  Requirements for OpenID Relying Parties
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   TODO Introduction

2.  Conventions and Definitions

   The keywords "shall", "shall not", "should", "should not", "may", and
   "can" in this document are to be interpreted as described in ISO
   Directive Part 2 [ISODIR2].  These keywords are not used as
   dictionary terms such that any occurrence of them shall be
   interpreted as keywords and are not to be interpreted with their
   natural language meanings.

2.1.  Roles

   This document uses the term "Identity Provider" to refer to the
   "OpenID Provider" in [OpenID] and the "Authorization Server" in
   [RFC6749].

   This document uses the term "Application" to refer to the "Relying
   Party" in [OpenID] and the "Client" in [RFC6749].

3.  Profile

3.1.  Network Layer Requirements

3.1.1.  Requirements for all endpoints

   To protect against network attacks, clients, authorization servers,
   and resource servers

   *  shall only offer TLS protected endpoints and shall establish
      connections to other servers using TLS;

   *  shall set up TLS connections using TLS version 1.2 or later;

   *  shall follow the recommendations for Secure Use of Transport Layer
      Security in [BCP195];

   *  should use DNSSEC to protect against DNS spoofing attacks that can
      lead to the issuance of rogue domain-validated TLS certificates;
      and

   *  shall perform a TLS server certificate check, as per [RFC9525].

3.1.2.  Requirements for endpoints not used by web browsers

   For server-to-server communication endpoints that are not used by web
   browsers, the following requirements apply:

   *  When using TLS 1.2, servers shall only permit the cipher suites
      recommended in [BCP195];

   *  When using TLS 1.2, clients should only permit the cipher suites
      recommended in [BCP195].

3.1.3.  Requirements for endpoints used by web browsers

   For endpoints that are used by web browsers, the following additional
   requirements apply:

   *  Servers shall use methods to ensure that connections cannot be
      downgraded using TLS stripping attacks.  A preloaded [preload]
      HTTP Strict Transport Security policy [RFC6797] can be used for
      this purpose.  Some top-level domains, like .bank and .insurance,
      have set such a policy and therefore protect all second-level
      domains below them.

   *  When using TLS 1.2, servers shall only use cipher suites allowed
      in [BCP195].

   *  Servers shall not support [CORS] for the authorization endpoint,
      as clients must perform an HTTP redirect rather than access this
      endpoint directly.

3.2.  Cryptography and Secrets

   The following requirements apply to cryptographic operations and
   secrets:

   *  Authorization servers, clients, and resource servers when creating
      or processing JWTs shall:

      -  adhere to [RFC8725];

      -  use PS256, ES256, or EdDSA (using the Ed25519 variant)
         algorithms; and

      -  not use or accept the none algorithm.

   *  RSA keys shall have a minimum length of 2048 bits.

   *  Elliptic curve keys shall have a minimum length of 224 bits.

   *  Credentials not intended for handling by end-users (e.g., access
      tokens, refresh tokens, authorization codes, etc.) shall be
      created with at least 128 bits of entropy such that an attacker
      correctly guessing the value is computationally infeasible
      (Section 10.10 of [RFC6749]).

3.3.  OpenID Connect

   In the following, a profile of the following technologies is defined:

   *  OpenID Connect Core 1.0 incorporating errata set 2
      [OpenID.Discovery]

   *  OpenID Connect Discovery [OpenID.Discovery]

   *  OAuth 2.0 Authorization Framework [RFC6749]

   *  Proof Key for Code Exchange (PKCE) [RFC7636]

   *  OAuth 2.0 Authorization Server Metadata [RFC8414]

   *  OAuth 2.0 Demonstrating Proof of Possession (DPoP) [RFC9449]

   *  OAuth 2.0 Authorization Server Issuer Identification [RFC9207]

3.3.1.  Requirements for OpenID Providers

   OpenID Providers:

   *  shall distribute discovery metadata (such as the authorization
      endpoint) via the metadata document as specified in
      [OpenID.Discovery];

   *  shall reject requests using the resource owner password
      credentials grant;

   *  shall only support confidential clients as defined in [RFC6749];

   *  shall authenticate clients using private_key_jwt as specified in
      Section 9 of [OpenID];

   *  shall only issue sender-constrained access tokens using DPoP
      [RFC9449];

   *  shall not expose open redirectors Section 4.11 of [RFC9700];

   *  shall only accept its issuer identifier value (as defined in
      [RFC8414]) as a string in the aud claim received in client
      authentication assertions;

   *  shall issue authorization codes with a maximum lifetime of 60
      seconds;

   *  shall require clients to be preregistered, and shall not support
      unauthenticated Dynamic Client Registration requests (see Note 1);

   ID Tokens issued by OpenID Providers:

   *  shall contain the OAuth Client ID of the RP as a single audience
      value as a string (see Note 2);

   *  shall contain acr claim as a string that identifies the
      Authentication Context Class that the authentication performed
      satisfied, as described in Section 2 of [OpenID];

   *  shall contain the amr claim as an array of strings indicating
      identifiers for authentication methods used in the authentication
      from those registered in the IANA Authentication Method Reference
      Values registry, as described in Section 2 of [OpenID];

   *  shall indicate the expected lifetime of the RP session in the
      session_lifetime claim in seconds (see Note 3);

   Note 1: The requirement for preregistered clients corresponds to
   Section 3.4 "Trust Agreements" of [NIST.FAL].

   Note 2: The audience value must be a single string to meet the
   audience restriction of [NIST.FAL].

   Note 3: This claim is not currently defined in OpenID Connect, this
   maybe should be pulled out into its own spec in OpenID Core instead
   of being defined here.

   For the authorization code flow, OpenID Providers:

   *  shall require the value of response_type described in [RFC6749] to
      be code;

   *  shall require PKCE [RFC7636] with S256 as the code challenge
      method (see Note 1 below);

   *  shall issue authorization codes with a maximum lifetime of 60
      seconds;

   *  shall support "Authorization Code Binding to DPoP Key" (as
      required by Section 10.1 of [RFC9449]);

   *  shall return an iss parameter in the authorization response
      according to [RFC9207];

   *  shall not transmit authorization responses over unencrypted
      network connections, and, to this end, shall not allow redirect
      URIs that use the "http" scheme except for native clients that use
      loopback interface Redirection as described in Section 7.3 of
      [RFC8252];

   *  shall reject an authorization code (Section 1.3.1 of [RFC6749]) if
      it has been previously used;

   *  shall not use the HTTP 307 status code when redirecting a request
      that contains user credentials to avoid forwarding the credentials
      to a third party accidentally (see Section 4.12 of [RFC9700]);

   *  should use the HTTP 303 status code when redirecting the user
      agent using status codes;

   *  shall support nonce parameter values up to 64 characters in
      length, may reject nonce values longer than 64 characters.

   TBD: Should PAR be required at level SL1?

   *  shall support client-authenticated pushed authorization requests
      according to [RFC9126];

   *  shall reject authorization requests sent without [RFC9126];

   *  shall reject pushed authorization requests without client
      authentication;

   *  shall issue pushed authorization requests request_uri with
      expires_in values of less than 600 seconds;

   Note 1: while both nonce and PKCE can provide protection from
   authorization code injection, nonce relies on the client (RP) to
   implement and enforce the check, and the IdP is unable to verify that
   it has been implemented correctly, and only stops the attack after
   tokens have already been issued.  Instead, PKCE is enforced by the
   IdP and stops the attack before tokens are issued.

3.3.2.  Requirements for OpenID Relying Parties

   OpenID Relying Parties:

   *  shall support third-party initiated login as defined in Section 4
      of [OpenID];

   *  shall support client authentication using private_key_jwt as
      specified in Section 9 of [OpenID];

   *  shall use the authorization server's issuer identifier value (as
      defined in [RFC8414]) in the aud claim in client authentication
      assertions.  The issuer identifier value shall be sent as a string
      not as an item in an array;

   *  shall not expose open redirectors (see Section 4.11 of [RFC9700]);

   *  shall only use authorization server metadata (such as the
      authorization endpoint) retrieved from the metadata document as
      specified in [OpenID.Discovery] and [RFC8414];

   *  shall ensure that the issuer URL used as the basis for retrieving
      the authorization server metadata is obtained from an
      authoritative source and using a secure channel, such that it
      cannot be modified by an attacker;

   *  shall ensure that this issuer URL and the issuer value in the
      obtained metadata match;

   OpenID Relying Parties making resource requests to the OpenID
   Provider:

   *  shall support sender-constrined access tokens using DPoP as
      described in [RFC9449];

   *  shall support the server provided nonce mechanism (as defined in
      Section 8 of [RFC9449]);

   *  shall send access tokens in the HTTP header as described in
      Section 7.1 of [RFC9449];

   *  shall support refresh tokens and their rotation;

   For the authorization code flow, Relying Parties:

   *  shall use the authorization code grant described in [RFC6749];

   *  shall use PKCE [RFC7636] with S256 as the code challenge method;

   *  shall generate the PKCE challenge specifically for each
      authorization request and securely bind the challenge to the
      client and the user agent in which the flow was started;

   *  shall check the iss parameter in the authorization response
      according to [RFC9207] to prevent mix-up attacks;

   *  should not use nonce parameter values longer than 64 characters;

   TBD: Should PAR be required at level SL1?

   *  shall use Pushed Authorization Requests according to [RFC9126];

   *  shall only send client_id and request_uri request parameters to
      the authorization endpoint (all other authorization request
      parameters are sent in the pushed authorization request according
      to [RFC9126]);

4.  Security Considerations

5.  IANA Considerations

   This document has no IANA actions.

6.  Normative References

   [BCP195]   Best Current Practice 195,
              <https://www.rfc-editor.org/info/bcp195>.
              At the time of writing, this BCP comprises the following:

              Moriarty, K. and S. Farrell, "Deprecating TLS 1.0 and TLS
              1.1", BCP 195, RFC 8996, DOI 10.17487/RFC8996, March 2021,
              <https://www.rfc-editor.org/info/rfc8996>.

              Sheffer, Y., Saint-Andre, P., and T. Fossati,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 9325, DOI 10.17487/RFC9325, November
              2022, <https://www.rfc-editor.org/info/rfc9325>.

   [NIST.FAL] "NIST SP 800-63 Digital Identity Guidelines Federation
              Assurance Level (FAL)", August 2024,
              <https://pages.nist.gov/800-63-4/sp800-63c/fal/>.

   [OpenID]   Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and
              C. Mortimore, "OpenID Connect Core 1.0 incorporating
              errata set 2", December 2023,
              <https://openid.net/specs/openid-connect-core-1_0.html>.

   [OpenID.Discovery]
              Sakimura, N., Bradley, J., Jones, M., and E. Jay, "OpenID
              Connect Discovery 1.0 incorporating errata set 2",
              December 2023, <https://openid.net/specs/openid-connect-
              discovery-1_0.html>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6750>.

   [RFC6797]  Hodges, J., Jackson, C., and A. Barth, "HTTP Strict
              Transport Security (HSTS)", RFC 6797,
              DOI 10.17487/RFC6797, November 2012,
              <https://www.rfc-editor.org/rfc/rfc6797>.

   [RFC7636]  Sakimura, N., Ed., Bradley, J., and N. Agarwal, "Proof Key
              for Code Exchange by OAuth Public Clients", RFC 7636,
              DOI 10.17487/RFC7636, September 2015,
              <https://www.rfc-editor.org/rfc/rfc7636>.

   [RFC8252]  Denniss, W. and J. Bradley, "OAuth 2.0 for Native Apps",
              BCP 212, RFC 8252, DOI 10.17487/RFC8252, October 2017,
              <https://www.rfc-editor.org/rfc/rfc8252>.

   [RFC8414]  Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", RFC 8414,
              DOI 10.17487/RFC8414, June 2018,
              <https://www.rfc-editor.org/rfc/rfc8414>.

   [RFC8725]  Sheffer, Y., Hardt, D., and M. Jones, "JSON Web Token Best
              Current Practices", BCP 225, RFC 8725,
              DOI 10.17487/RFC8725, February 2020,
              <https://www.rfc-editor.org/rfc/rfc8725>.

   [RFC9126]  Lodderstedt, T., Campbell, B., Sakimura, N., Tonge, D.,
              and F. Skokan, "OAuth 2.0 Pushed Authorization Requests",
              RFC 9126, DOI 10.17487/RFC9126, September 2021,
              <https://www.rfc-editor.org/rfc/rfc9126>.

   [RFC9207]  Meyer zu Selhausen, K. and D. Fett, "OAuth 2.0
              Authorization Server Issuer Identification", RFC 9207,
              DOI 10.17487/RFC9207, March 2022,
              <https://www.rfc-editor.org/rfc/rfc9207>.

   [RFC9449]  Fett, D., Campbell, B., Bradley, J., Lodderstedt, T.,
              Jones, M., and D. Waite, "OAuth 2.0 Demonstrating Proof of
              Possession (DPoP)", RFC 9449, DOI 10.17487/RFC9449,
              September 2023, <https://www.rfc-editor.org/rfc/rfc9449>.

   [RFC9525]  Saint-Andre, P. and R. Salz, "Service Identity in TLS",
              RFC 9525, DOI 10.17487/RFC9525, November 2023,
              <https://www.rfc-editor.org/rfc/rfc9525>.

   [RFC9700]  Lodderstedt, T., Bradley, J., Labunets, A., and D. Fett,
              "Best Current Practice for OAuth 2.0 Security", BCP 240,
              RFC 9700, DOI 10.17487/RFC9700, January 2025,
              <https://www.rfc-editor.org/rfc/rfc9700>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Aaron Parecki
   Okta
   Email: aaron@parecki.com
